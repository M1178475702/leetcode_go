package leetcode_go

import "sort"

/**
 * 剑指 Offer 61. 扑克牌中的顺子
 * 难度：简单
 * 从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，
 * 而大、小王为 0 ，可以看成任意数字。A 不能视为 14。
 * 数组长度为 5，数组的数取值为 [0, 13]
 * 解法：一个zcnt记录大小王的个数；如何判断是否连续？或者如何检测间距个数？先排序，然后记录0个数，然后遍历，记录前后间距个数
 * i与i+1的间距个数应该为 nums[i + 1] - nums[i] - 1；若间距个数之和s - cnt(0) <= 0，则说明大小王能补充掉间隙
 */

func isStraight(nums []int) bool {
	sort.Ints(nums)
	zcnt := 0
	s := 0
	var i int
	for i < 5 {
		if i == 0 {
			i++
			zcnt++
		} else {
			i++
			break
		}
	}
	//4个或5个0必连续
	if i >= 4 {
		return true
	}
	//the max of i is 3
	for i + 1 < 5 {
		//有一样的牌则不吭是顺子
		if nums[i + 1] == nums[i] {
			return false
		}
		s += nums[i + 1] - nums[i] - 1
		i++
	}
	//[0,0,0,9,11] s - zcnt < 0;当 s - zcnt < 0时，同样说明0能补充掉间隙
	return s - zcnt <= 0
}


/**
 * 剑指 Offer 62. 圆圈中最后剩下的数字
 * 难度：简单
 * 0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。
 * 例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3
 * 解法1：用链表模拟（或数组+copy模拟）
 * 解法2：向上递推：最后只剩下一个元素，假设这个最后存活的元素为 num, 这个元素最终的的下标一定是0 （因为最后只剩这一个元素）
 * 如果我们可以推出上一轮次中这个num的下标，然后根据上一轮num的下标推断出上上一轮num的下标，
 * 直到推断出元素个数为n的那一轮num的下标，那我们就可以根据这个下标获取到最终的元素了
 * 公式为 （index + m） % n（n为上一轮个数）
 */

func lastRemaining(n int, m int) int {
	r := 0
	for i := 2; i <= n; i++ {
		r = (r + m) % i
	}
	return r
}




